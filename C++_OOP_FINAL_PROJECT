#include <iostream>
#include <string>

// Struct representing a date with day, month, year
struct Date {
    int day, month, year;

    // Overload equality operator to compare two Date objects
    bool operator==(const Date& other) const {
        return day == other.day && month == other.month && year == other.year;
    }
};

// Abstract base class representing a hotel room
class Room {
protected:
    int roomId;            // Unique identifier for the room
    Date* reservedDates;   // Dynamic array storing booked dates
    int reservedCount;     // Number of dates currently booked
    int reservedCapacity;  // Capacity of the reservedDates array

    // Helper function to resize the reservedDates array when full
    void resizeDatesArray() {
        int newCapacity = reservedCapacity == 0 ? 2 : reservedCapacity * 2; // Double capacity or set to 2 if empty
        Date* newArr = new Date[newCapacity]; // Allocate new larger array
        // Copy old dates to new array using pointer arithmetic
        for (int i = 0; i < reservedCount; ++i) {
            newArr[i] = reservedDates[i];
        }
        delete[] reservedDates;  // Free old array memory
        reservedDates = newArr;  // Update pointer to new array
        reservedCapacity = newCapacity; // Update capacity
    }

public:
    // Constructor initializes members
    Room(int id) : roomId(id), reservedDates(nullptr), reservedCount(0), reservedCapacity(0) {}

    // Virtual destructor to allow proper cleanup of derived classes
    virtual ~Room() {
        delete[] reservedDates;  // Delete dynamic dates array
    }

    int getId() const {
        return roomId; // Return room ID
    }

    // Pure virtual functions making this an abstract class
    virtual bool isReserved(const Date* date) = 0; // Check if date is booked
    virtual void book(const Date* date) = 0;       // Book a date

    // Return type of room (Standard or Presidential)
    virtual std::string getType() const = 0;
};

// Derived class representing a standard room
class StandardRoom : public Room {
public:
    StandardRoom(int id) : Room(id) {}

    // Check if a date is already reserved using pointer arithmetic
    bool isReserved(const Date* date) override {
        for (int i = 0; i < reservedCount; ++i) {
            if (*(reservedDates + i) == *date) { // Compare each booked date with given date
                return true; // Date is already booked
            }
        }
        return false; // Date not found
    }

    // Book a date if available
    void book(const Date* date) override {
        if (isReserved(date)) { // Check conflict
            std::cout << "StandardRoom " << roomId << " is already booked for this date.\n";
            return;
        }
        if (reservedCount == reservedCapacity) { // Resize array if needed
            resizeDatesArray();
        }
        *(reservedDates + reservedCount) = *date; // Add new date at next position
        reservedCount++; // Increase count
        std::cout << "StandardRoom " << roomId << " booked for " << date->day << "/" << date->month << "/" << date->year << "\n";
    }

    // Return type name
    std::string getType() const override {
        return "StandardRoom";
    }
};

// Derived class representing a presidential suite
class PresidentialSuite : public Room {
public:
    PresidentialSuite(int id) : Room(id) {}

    // Check if a date is already reserved using pointer arithmetic
    bool isReserved(const Date* date) override {
        for (int i = 0; i < reservedCount; ++i) {
            if (*(reservedDates + i) == *date) {
                return true;
            }
        }
        return false;
    }

    // Book a date if available
    void book(const Date* date) override {
        if (isReserved(date)) {
            std::cout << "PresidentialSuite " << roomId << " is already booked for this date.\n";
            return;
        }
        if (reservedCount == reservedCapacity) {
            resizeDatesArray();
        }
        *(reservedDates + reservedCount) = *date;
        reservedCount++;
        std::cout << "PresidentialSuite " << roomId << " booked for " << date->day << "/" << date->month << "/" << date->year << "\n";
    }

    // Return type name
    std::string getType() const override {
        return "PresidentialSuite";
    }
};

// Manager class to handle multiple rooms dynamically
class HotelReservationManager {
    Room** rooms;    // Dynamic array of pointers to Room objects
    int roomCount;   // Number of rooms currently managed

    // Resize rooms array to newSize (used for adding/removing rooms)
    void resizeRoomsArray(int newSize) {
        Room** newRooms = new Room*[newSize]; // Allocate new array
        for (int i = 0; i < roomCount && i < newSize; ++i) {
            newRooms[i] = rooms[i]; // Copy existing room pointers
        }
        delete[] rooms; // Delete old array memory
        rooms = newRooms; // Update pointer
    }

public:
    HotelReservationManager() : rooms(nullptr), roomCount(0) {}

    ~HotelReservationManager() {
        for (int i = 0; i < roomCount; ++i) {
            delete rooms[i]; // Delete each Room object
        }
        delete[] rooms; // Delete rooms array
    }

    // Add a new room, resizing rooms array
    void addRoom(Room* newRoom) {
        resizeRoomsArray(roomCount + 1); // Increase array size by 1
        rooms[roomCount] = newRoom;       // Add new room pointer
        roomCount++;                      // Increase count
        std::cout << newRoom->getType() << " with ID " << newRoom->getId() << " added successfully.\n";
    }

    // Remove a room by roomId
    void removeRoom(int roomId) {
        int index = -1;
        for (int i = 0; i < roomCount; ++i) {
            if (rooms[i]->getId() == roomId) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            std::cout << "Room with ID " << roomId << " not found.\n";
            return;
        }
        delete rooms[index]; // Delete the room object
        for (int i = index; i < roomCount - 1; ++i) {
            rooms[i] = rooms[i + 1]; // Shift left to fill gap
        }
        roomCount--;              // Decrease count
        resizeRoomsArray(roomCount); // Resize array smaller
        std::cout << "Room with ID " << roomId << " removed successfully.\n";
    }

    // Book a room on a specific date
    void bookRoom(int roomId, const Date* date) {
        for (int i = 0; i < roomCount; ++i) {
            if (rooms[i]->getId() == roomId) {
                if (!rooms[i]->isReserved(date)) { // If date available
                    rooms[i]->book(date);
                } else {
                    std::cout << "Room " << roomId << " is already reserved on this date.\n";
                }
                return;
            }
        }
        std::cout << "Room " << roomId << " not found.\n";
    }

    // Check if a room is available on a specific date
    void checkAvailability(int roomId, const Date* date) {
        for (int i = 0; i < roomCount; ++i) {
            if (rooms[i]->getId() == roomId) {
                if (rooms[i]->isReserved(date)) {
                    std::cout << "Room " << roomId << " is reserved on " << date->day << "/" << date->month << "/" << date->year << "\n";
                } else {
                    std::cout << "Room " << roomId << " is available on " << date->day << "/" << date->month << "/" << date->year << "\n";
                }
                return;
            }
        }
        std::cout << "Room " << roomId << " not found.\n";
    }

    // List all rooms currently managed
    void listRooms() {
        if (roomCount == 0) {
            std::cout << "No rooms available.\n";
            return;
        }
        std::cout << "Rooms available:\n";
        for (int i = 0; i < roomCount; ++i) {
            std::cout << "- ID: " << rooms[i]->getId() << " Type: " << rooms[i]->getType() << "\n";
        }
    }
};

// Main function to interactively manage hotel reservations
int main() {
    HotelReservationManager manager; // Create manager instance
    int choice;

    while (true) {
        // Display menu options
        std::cout << "\n--- Hotel Reservation Manager ---\n";
        std::cout << "1. Add Room\n2. Remove Room\n3. Book Room\n4. Check Room Availability\n5. List Rooms\n6. Exit\n";
        std::cout << "Enter choice: ";
        std::cin >> choice;

        if (choice == 1) {
            // Add room
            std::cout << "Choose room type (1-Standard, 2-Presidential): ";
            int type; std::cin >> type;
            std::cout << "Enter room ID (integer): ";
            int id; std::cin >> id;

            if (type == 1) {
                manager.addRoom(new StandardRoom(id)); // Add standard room
            } else if (type == 2) {
                manager.addRoom(new PresidentialSuite(id)); // Add presidential suite
            } else {
                std::cout << "Invalid room type.\n";
            }

        } else if (choice == 2) {
            // Remove room
            std::cout << "Enter room ID to remove: ";
            int id; std::cin >> id;
            manager.removeRoom(id);

        } else if (choice == 3) {
            // Book room
            std::cout << "Enter room ID to book: ";
            int id; std::cin >> id;
            Date date;
            std::cout << "Enter booking date (day month year): ";
            std::cin >> date.day >> date.month >> date.year;
            manager.bookRoom(id, &date);

        } else if (choice == 4) {
            // Check availability
            std::cout << "Enter room ID to check availability: ";
            int id; std::cin >> id;
            Date date;
            std::cout << "Enter date to check (day month year): ";
            std::cin >> date.day >> date.month >> date.year;
            manager.checkAvailability(id, &date);

        } else if (choice == 5) {
            // List all rooms
            manager.listRooms();

        } else if (choice == 6) {
            // Exit program
            std::cout << "Exiting...\n";
            break;

        } else {
            std::cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
